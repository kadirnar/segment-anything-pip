[tool.poetry]
name = "metaseg"
version = "0.7.8"
description = "MetaSeg: Packaged version of the Segment Anything repository"
authors = ["Kadir Nar <kadir.nar@hotmail.com>"]
maintainers = ["Kadir Nar <kadir.nar@hotmail.com>"]
readme = "README.md"
packages = [{include = "metaseg"}]
homepage = "https://github.com/kadirnar/segment-anything-video"
repository = "https://github.com/kadirnar/segment-anything-video"
documentation = "https://github.com/kadirnar/segment-anything-video/blob/main/README.md"
keywords = ["pytorch","segment-anything-video","metaseg"]
license = "Apache-2.0"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
]


[tool.poetry.dependencies]
python = ">=3.8.1,<3.12.0"
torch = "^2.0.1"
torchvision = "^0.15.2"
opencv-python = "^4.7.0.72"
tqdm = "^4.65.0"
matplotlib = "^3.7.1"
pillow = "^9.5.0"
pycocotools = "^2.0.6"
fal-serverless = "^0.6.35"
sahi = "^0.11.14"
onnx = { version = "^1.14.0", optional = true }
onnxruntime =  { version ="^1.15.1", optional = true }
ultralytics = { version = "^8.0.123", optional = true }
yolov5 = { version ="^7.0.12", optional = true }
requests = "^2.31.0"


[tool.poetry.extras]
full = ["onnxruntime","onnx","yolov5","ultralytics"]
yolov5 = ["yolov5"]
yolov8 = ["ultralytics"]


[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
mypy = "^1.0.1"
bandit = "^1.7.4"
debugpy = "^1.6.6"
rope = "^1.7.0"
wheel = "^0.38.4"
setuptools = "^67.4.0"
coverage = "^7.2.1"
pre-commit = "^3.1.1"
pyupgrade = "^3.3.1"
ruff = "^0.0.244"
pytest = "^7.2.1"
toml = "^0.10.2"
flake8 = "^6.0.0"
isort = "^5.12.0"
parameterized = "^0.9.0"



[tool.isort]
line_length = 88
profile = "black"

[tool.bandit]
target = ["tests", "metaseg"]
tests = ["B201", "B301"]

[tool.autoflake]
check = true
imports = ["cv2", "requests", "metaseg"]


[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
ignore-init-module-imports = true

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "PD", "PGH", "PIE", "PL", "PT", "PTH", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

select = [
    # flake8-builtins
    "A",
    # flake8-blind-except
    "BLE",
    # flake8-comprehensions
    "C4",
    # mccabe complexity
    "C90",
    # pydocstyle
    "D",
    # pycodestyle
    "E", "W",
    # eradicate (remove commented out code)
    "ERA",
    # pyflakes
    "F",
    # flake8-logging-format
    "G",
    # isort
    "I",
    # flake8-import-conventions
    "ICN",
    # flake8-implicit-str-concat
    "ISC",
    # pylint
    "PLC", "PLE", "PLR", "PLW",
    # misc lints
    "PIE",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # pygrep-hooks
    "PGH",
    # flake8-quotes
    "Q",
    # flake8-bandit
    "S",
    # flake8-debugger
    "T10",
    # flake8-print
    "T20",
    # flake8-type-checking
    "TCH",
    # tidy imports
    "TID",
    # pyupgrade
    "UP",
    # Ruff-specific rules
    "RUF",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "examples",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402","F401"]

[tool.ruff.pylint]
max-args = 20

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
